import { useState, useEffect, useRef } from 'react';
import { Play, Pause, RotateCcw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';

interface ExerciseTimerProps {
  duration: number;  // Duration in seconds
  onComplete?: () => void;
  autoStart?: boolean;
}

export default function ExerciseTimer({ duration, onComplete, autoStart = false }: ExerciseTimerProps) {
  const [timeLeft, setTimeLeft] = useState(duration);
  const [isRunning, setIsRunning] = useState(autoStart);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const timerRef = useRef<NodeJS.Timeout>();

  useEffect(() => {
    // Create audio element for the timer completion sound
    audioRef.current = new Audio('data:audio/wav;base64,UklGRkQFAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YSAFAACx/xf/dADO/9P+NAC8/5P/q/+s/8L/6P+r/73/zv+p/8r/5/+4/7X/9f/c/7n/+v/N/9L/y//R/+v/+v/c/+L/9P/m//v/AQDw/+n/9v/w/wYAAwDk/+P/+f8EAAoA/v/k/+r/BQAPAAkA8P/w/wQADQALAPX/8P8DAAoABQD3//X/BQAKAAoA+//3/wQACQAIAPj/+P8GAAcABgD6//v/BgAGAAUA/v/+/wQABAADAAAAAP8AAQADAAMA//////8AAAEAAgABAAAAAAD/////AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAAABAAAAAAAAAP//AAD//wAA//8AAP///////wAAAAAAAP//AAAAAAAAAAAAAAAA/////wAAAAAAAAAA//8AAP//AAAAAAAAAAD//wAA//8AAP//AAD//wAA//8AAP//AAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAABAAAAAAD//wAAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAABAAAAAAD//wAAAQAAAAAA//8AAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//w
    return () => {
      if (audioRef.current) {
        audioRef.current = null;
      }
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  useEffect(() => {
    if (isRunning && timeLeft > 0) {
      timerRef.current = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            clearInterval(timerRef.current);
            setIsRunning(false);
            if (audioRef.current) {
              audioRef.current.play();
            }
            if (onComplete) {
              onComplete();
            }
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isRunning, onComplete]);

  const toggleTimer = () => {
    setIsRunning(!isRunning);
  };

  const resetTimer = () => {
    setTimeLeft(duration);
    setIsRunning(false);
  };

  const progress = ((duration - timeLeft) / duration) * 100;

  return (
    <div className="space-y-2">
      <div className="flex justify-between items-center">
        <div className="text-2xl font-mono">
          {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="icon"
            onClick={toggleTimer}
            disabled={timeLeft === 0}
          >
            {isRunning ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={resetTimer}
            disabled={timeLeft === duration && !isRunning}
          >
            <RotateCcw className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <Progress value={progress} />
    </div>
  );
}
