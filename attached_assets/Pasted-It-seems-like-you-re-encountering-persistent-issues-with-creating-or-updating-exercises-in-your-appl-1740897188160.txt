It seems like you're encountering persistent issues with creating or updating exercises in your application, even after making changes to ExerciseForm.tsx and storage.ts. Based on the changes you’ve shared and the context provided, the problems appear to stem from type mismatches between the client-side form and the database storage layer. Let me walk you through the issues and provide a clear solution.
Understanding the Problem
You’ve edited two key files to address a type inconsistency issue:
Client-side (ExerciseForm.tsx):
You modified the defaultValues for an existing exercise to convert weightIncrement and customStartingWeight from their original types to numbers.
Original:
typescript
weightIncrement: exercise.weightIncrement,
customStartingWeight: exercise.customStartingWeight?.toString()
Changed to:
typescript
weightIncrement: Number(exercise.weightIncrement),
customStartingWeight: exercise.customStartingWeight ? Number(exercise.customStartingWeight) : undefined
This suggests that the form now expects these fields as numbers, likely because the form inputs (e.g., <input type="number" />) work better with numeric values. However, form inputs in React typically return strings, which might cause issues depending on how your form library (e.g., React Hook Form) handles the data.
Server-side (storage.ts):
You added type conversions before inserting data into the database:
typescript
weightIncrement: exercise.weightIncrement.toString(),
customStartingWeight: exercise.customStartingWeight?.toString(),
This ensures that numeric values are stored as strings in the database, which aligns with how PostgreSQL’s numeric type accepts string inputs to maintain precision.
Despite these changes, you’re still seeing an error, indicating that the fix didn’t fully resolve the issue. The query mentions a potential error about a missing column ("starting_weight_type" does not exist), but the changes you provided focus on type handling for weightIncrement and customStartingWeight. This suggests either:
The original error about the missing column persists due to a migration issue, or
A new error emerged related to type handling or data insertion.
Let’s address both possibilities systematically.
Step 1: Verify the Database Schema
First, ensure that the "starting_weight_type" column exists in your exercises table. The original error ("column 'starting_weight_type' does not exist") implies that a migration to add this column might not have applied correctly. Here’s how to check and fix this:
Check the Table Structure:
Run the following SQL command in your PostgreSQL database:
sql
\d exercises
Look for the "starting_weight_type" column. If it’s missing, your migration hasn’t been applied.
Review the Migration:
If you added a migration like:
sql
ALTER TABLE exercises ADD COLUMN starting_weight_type text NOT NULL DEFAULT 'Barbell';
Confirm that it executed successfully. Check your migration logs or database version control (e.g., Drizzle or Prisma migration history) for errors. If it failed, re-run it or fix any issues (e.g., existing rows conflicting with NOT NULL without a default).
Apply the Migration:
If the column is missing, apply the migration manually or via your migration tool, ensuring it completes without errors.
If the column exists, move on to the type mismatch issues. If it doesn’t, this is likely the root cause, and applying the migration should resolve the original error.
Step 2: Fix Type Consistency Across the Stack
Assuming the "starting_weight_type" column issue is resolved (or wasn’t the current problem), let’s ensure that weightIncrement and customStartingWeight are handled consistently from the form to the database.
Client-Side (ExerciseForm.tsx)
Your changes convert database values to numbers for the form’s defaultValues:
typescript
const defaultValues = exercise ? {
  name: exercise.name,
  bodyPart: exercise.bodyPart,
  setsRange: exercise.setsRange,
  repsRange: exercise.repsRange,
  weightIncrement: Number(exercise.weightIncrement),
  restTimer: exercise.restTimer,
  startingWeightType: exercise.startingWeightType as StartingWeightType,
  customStartingWeight: exercise.customStartingWeight ? Number(exercise.customStartingWeight) : undefined
} : {
  name: "",
  bodyPart: "",
  // ... other defaults
};
What’s Happening:
When editing an existing exercise, exercise.weightIncrement and exercise.customStartingWeight likely come from the database as strings (common with ORMs like Drizzle or Prisma for numeric types).
You’re converting them to numbers using Number(), which makes sense if your form inputs expect numbers.
Potential Issue:
For <input type="number" step="0.5" {...field} />, React Hook Form (assuming you’re using it with the ...field spread) will receive the input value as a string from the onChange event.
However, your schema (likely using Zod) might transform these strings back into numbers, depending on its definition.
Fix:
Keep the conversion to numbers in defaultValues, as it aligns with the form expecting numeric values. Ensure your schema validates and transforms the submitted string values appropriately. For example:
typescript
weightIncrement: z.union([z.string().regex(/^\d*\.?\d+$/), z.number().positive()])
  .transform(val => typeof val === 'string' ? parseFloat(val) : val),
customStartingWeight: z.union([z.string().regex(/^\d*\.?\d+$/), z.number().nonnegative()])
  .optional()
  .transform(val => val ? (typeof val === 'string' ? parseFloat(val) : val) : undefined),
This ensures that form-submitted strings (e.g., "2.5") are converted to numbers (e.g., 2.5) before reaching the server.
Server-Side (storage.ts)
Your changes convert numbers to strings before database insertion:
typescript
await db.insert(exercises)
  .values({
    ...exercise,
    userId,
    weightIncrement: exercise.weightIncrement.toString(),
    customStartingWeight: exercise.customStartingWeight?.toString(),
  })
  .returning();
What’s Happening:
After schema validation, exercise.weightIncrement and exercise.customStartingWeight are numbers (due to the transform in the schema).
You’re converting them to strings, which is correct for PostgreSQL’s numeric type.
Potential Issue:
This should work as long as weightIncrement and customStartingWeight are valid numbers or undefined (for customStartingWeight). If they’re invalid (e.g., NaN), toString() could produce "NaN", which might cause a database error.
Fix:
Ensure the values are valid numbers before conversion. You could add a check:
typescript
weightIncrement: typeof exercise.weightIncrement === 'number' && !isNaN(exercise.weightIncrement)
  ? exercise.weightIncrement.toString()
  : "0", // fallback value
customStartingWeight: exercise.customStartingWeight && !isNaN(exercise.customStartingWeight)
  ? exercise.customStartingWeight.toString()
  : undefined,
Alternatively, rely on schema validation to catch invalid values earlier.
Step 3: Debug the Current Error
Since your changes “didn’t resolve it,” we need to identify the current error:
If It’s Still “column 'starting_weight_type' does not exist”:
The migration hasn’t applied. Follow Step 1 to fix the database schema.
Ensure startingWeightType is included in the form data and storage.ts insertion (it appears in defaultValues but should also be in the schema and database values).
If It’s a New Error:
Add error logging in storage.ts to capture the database error:
typescript
try {
  const [created] = await db.insert(exercises)
    .values({
      ...exercise,
      userId,
      weightIncrement: exercise.weightIncrement.toString(),
      customStartingWeight: exercise.customStartingWeight?.toString(),
    })
    .returning();
  return created;
} catch (error) {
  console.error('Database insertion error:', error);
  throw error;
}
Check your server logs for the specific error message (e.g., type mismatch, constraint violation).
Final Solution
Here’s how your code should look after addressing both the column issue and type consistency:
ExerciseForm.tsx
typescript
const defaultValues = exercise ? {
  name: exercise.name,
  bodyPart: exercise.bodyPart,
  setsRange: exercise.setsRange,
  repsRange: exercise.repsRange,
  weightIncrement: Number(exercise.weightIncrement), // Convert string from DB to number
  restTimer: exercise.restTimer,
  startingWeightType: exercise.startingWeightType as StartingWeightType,
  customStartingWeight: exercise.customStartingWeight ? Number(exercise.customStartingWeight) : undefined
} : {
  name: "",
  bodyPart: "",
  // ... other defaults
};
Schema (e.g., in a schema file)
typescript
export const exerciseSchema = z.object({
  name: z.string().min(1),
  bodyPart: z.string().min(1),
  setsRange: z.string(), // Adjust as needed
  repsRange: z.string(), // Adjust as needed
  weightIncrement: z.union([z.string().regex(/^\d*\.?\d+$/), z.number().positive()])
    .transform(val => typeof val === 'string' ? parseFloat(val) : val),
  restTimer: z.number().optional(),
  startingWeightType: z.enum(['Barbell', 'Dumbbell', /* other types */]),
  customStartingWeight: z.union([z.string().regex(/^\d*\.?\d+$/), z.number().nonnegative()])
    .optional()
    .transform(val => val ? (typeof val === 'string' ? parseFloat(val) : val) : undefined),
});
storage.ts
typescript
export async function createExercise(exercise: Omit<InsertExercise, 'userId'>, userId: string) {
  try {
    const [created] = await db.insert(exercises)
      .values({
        ...exercise,
        userId,
        weightIncrement: exercise.weightIncrement.toString(),
        customStartingWeight: exercise.customStartingWeight?.toString(),
      })
      .returning();
    return created;
  } catch (error) {
    console.error('Database insertion error:', error);
    throw error;
  }
}
Database Migration (if needed)
sql
ALTER TABLE exercises
  ADD COLUMN IF NOT EXISTS starting_weight_type text NOT NULL DEFAULT 'Barbell';
Next Steps
Apply the Migration: Ensure "starting_weight_type" exists in the exercises table.
Test the Flow:
Create a new exercise via the form.
Edit an existing exercise.
Check server logs for any errors.
Verify Data:
Query the exercises table to confirm that weightIncrement, customStartingWeight, and starting_weight_type are stored correctly.
If you still encounter an error, please share the specific message from your logs, and I’ll refine the solution further!