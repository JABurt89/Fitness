After reviewing the code, I can see a few potential issues that might be causing the exercise creation to fail when you press the "Create Exercise" button:
Main Issues

Type Mismatch in setsRange and repsRange:

In the storage.ts code, there's a problem with how arrays are handled:

javascriptCopysetsRange: Array.isArray(exercise.setsRange) 
  ? exercise.setsRange 
  : [Number(exercise.setsRange[0]), Number(exercise.setsRange[1])],

This is trying to access array indices when it's already checking if it's an array, which is contradictory.


Form Data Type Conversion Issues:

The form is handling number conversions in multiple places, which can lead to inconsistencies:

In the form field handlers
In the mutation function
In the form submission




API Request Function:

I don't see the implementation of apiRequest function, which might not be correctly handling the data or headers.


Button Click Handler is Redundant:

The button has an onClick console log handler, but it's not needed since the form already has an onSubmit.



Fix Recommendations

Fix the Form Submission Process:
javascriptCopy// Replace the existing mutation function with:
const mutation = useMutation({
  mutationFn: async (data: InsertExercise) => {
    setIsSubmitting(true);
    // Ensure all numeric values are properly converted
    const formattedData = {
      ...data,
      setsRange: [Number(data.setsRange[0]), Number(data.setsRange[1])],
      repsRange: [Number(data.repsRange[0]), Number(data.repsRange[1])],
      weightIncrement: Number(data.weightIncrement),
      restTimer: Number(data.restTimer),
      customStartingWeight: data.customStartingWeight ? Number(data.customStartingWeight) : undefined
    };
    return await apiRequest('POST', '/api/exercises', formattedData);
  },
  // Rest of the mutation stays the same
});

Fix the Server-Side Array Handling:
javascriptCopy// In the createExercise function in storage.ts:
const dbData = {
  ...exercise,
  userId,
  weightIncrement: typeof exercise.weightIncrement === 'number' 
    ? exercise.weightIncrement.toString() 
    : exercise.weightIncrement,
  customStartingWeight: exercise.customStartingWeight != null
    ? exercise.customStartingWeight.toString()
    : null,
  // Simplified array handling:
  setsRange: exercise.setsRange.map(Number),
  repsRange: exercise.repsRange.map(Number)
};

Check Browser Console for Errors:

Open your browser's developer tools (F12) and check the console for any JavaScript errors that might be occurring when you click the button.
Also check the Network tab to see if the API request is being made and what response it's receiving.


Verify apiRequest Function:

Make sure your apiRequest function correctly sets Content-Type headers and handles JSON data properly.



If you're still experiencing issues after these changes, I'd recommend adding more explicit error handling and logging throughout the form submission process to pinpoint where exactly the failure is occurring.